plugins {
	id 'org.springframework.boot' version '2.5.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "org.sonarqube" version "3.3"
	id 'jacoco'
}

group = 'com.apus.drones'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

bootJar {
	archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

repositories {
	mavenCentral()
}

dependencies {
	def activeProfile = System.getenv('SPRING_PROFILES_ACTIVE') ?: 'local'
	logger.quiet(String.format('SPRING_PROFILES_ACTIVE: %s', activeProfile))

	implementation 'org.springframework.boot:spring-boot-starter-web:2.5.4'
	implementation 'io.springfox:springfox-swagger2:3.0.0'
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	implementation 'io.springfox:springfox-swagger-ui:3.0.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-test:2.5.4'

	//Adding JWT
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	implementation 'javax.xml.bind:jaxb-api'
	testImplementation 'org.springframework.security:spring-security-test:5.5.1'

	//json parsing
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.5'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.5.4'
	implementation 'org.hibernate:hibernate-spatial:5.5.7.Final'

	compileOnly 'org.projectlombok:lombok:1.18.20'
	annotationProcessor 'org.projectlombok:lombok:1.18.20'

	implementation 'org.springframework.boot:spring-boot-starter-validation:2.5.4'
	testImplementation('org.assertj:assertj-core:3.20.2')

	implementation 'com.amazonaws:aws-java-sdk:1.12.77'

	if (activeProfile == 'prd') {
		//mysql db (production)
		runtimeOnly 'mysql:mysql-connector-java:8.0.25'
	} else {
		//embedded db
		// A versão 1.4.200 do H2 não funciona com o h2gis
		runtimeOnly 'com.h2database:h2:1.4.197'
		runtimeOnly 'org.orbisgis:h2gis:1.5.0'
	}
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
	testLogging {
		events "failed"
		exceptionFormat "full"
	}
}

jacocoTestReport {
	dependsOn test
}

sonarqube {
	properties {
		property "sonar.projectKey", "apus-drones-backend"
		property "sonar.qualitygate.wait", true
	}
}

bootRun {
	main = 'com.apus.drones.apusdronesbackend.ApusDronesBackendApplication'
}